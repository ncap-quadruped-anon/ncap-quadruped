"""This module provides functions to shape the scores array generated by a population of
perturbations."""
import numpy as np


def identity(scores: np.ndarray) -> np.ndarray:
  """Use the raw scores without any transformation."""
  return scores


def scaled_rank(scores: np.ndarray, lower: float = -0.5, upper: float = 0.5) -> np.ndarray:
  """Transform the scores into relative ranks scaled within the interval [lower, upper]. The
  smallest score becomes `lower`, the largest score becomes `upper`, and the other scores are
  equally spaced in between."""
  ranks = np.empty(scores.size, dtype=int)
  ranks[scores.ravel().argsort()] = np.arange(scores.size)
  scaled_values = np.linspace(lower, upper, scores.size)
  return scaled_values[ranks].reshape(scores.shape)


def z_scores(scores: np.ndarray) -> np.ndarray:
  """Transform the scores into standard z-scores by subtracting the mean and dividing by the
  standard deviation."""
  return (scores - scores.mean()) / scores.std()


def modified_z_scores(scores: np.ndarray, consistency: float = 1.4826) -> np.ndarray:
  """Transform the scores into modified z-scores by subtracting the median and dividing by the
  median absolute deviation. This metric highlights outliers in a skewed distribution using more
  extreme values."""
  median = np.median(scores)
  deviations = scores - median
  mad = np.median(np.abs(deviations))
  return deviations / (consistency * mad)  # type: ignore
